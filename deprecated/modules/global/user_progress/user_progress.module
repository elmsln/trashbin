<?php
/**
 * @file
 * Hooks provided by Regions.
 */
// max data points that can be defined, helps provide some limits.
define('USER_PROGRESS_MAX_DATA_POINTS', 16);
/**
 * Implements hook_permission().
 */
function user_progress_permission() {
  $types = _user_progress_list_types();
  // Generate a list of regions and permissions.
  if (!empty($types)) {
    foreach (array_keys($types) as $type) {
      $perms['set ' . $type . ' progress record'] = array(
      'title' => $types[$type]->name,
      'description' => t('Grant access to use the %title requirements dashboard', array('%title' => $types[$type]->name)),
    );
    }
  }
  $perms['get user progress record'] = array(
      'title' => t('GET up records'),
      'description' => t('This is the permission needed for generally receiving data from user progress.'),
    );
  $perms['set user progress record'] = array(
      'title' => t('SET up records'),
      'description' => t('This is the permission needed for generally sending data to user progress.'),
    );
  return $perms;
}

/**
 * Helper function to build list of types.
 */
function _user_progress_list_types() {
  $types = array();
  $result = db_query("SELECT * FROM {user_progress_types}");
  foreach ($result as $val) {
    $types[$val->upt_name] = $val;
  }
  return $types;
}
/**
 * Helper function to include javascript logic for ajax calls.
 */
function _user_progress_js_setup($ary = array()) {
  // establish environment variables
  $node = menu_get_object();
  $js_vars = array(
    'last_call' => 0,
    'guid' => drupal_get_token(),
    'ajax_path' => base_path() . 'user_progress',
    'nid' => $node->nid,
  );
  // merge potential external values with required locals
  $js_variables = array_merge($js_vars, $ary);
  drupal_add_js(array('user_progress' => $js_variables), array('type' => "setting", 'scope' => JS_DEFAULT));
  // add up js api
  drupal_add_js(drupal_get_path('module', 'user_progress') . '/js/user_progress.js', array('type' => 'header', 'scope' => JS_DEFAULT));
}

/**
 * Implements hook_menu().
 */
function user_progress_menu() {
  // a call to rebuild the menu cache means we should rebuild the type definitions
  _user_progress_rebuild_types();
  $items = array();
  $items['user_progress/get'] = array(
    'access arguments' => array('get user progress record'),
    'page callback' => '_user_progress_get',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['user_progress/set'] = array(
    'access arguments' => array('set user progress record'),
    'page callback' => '_user_progress_set',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/people/user_progress'] = array(
    'title' => 'User Progress',
    'description' => 'User Progress global settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_user_progress_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_settings().
 */
function _user_progress_settings($form_state) {
  // get all types
  $types = _user_progress_list_types();
  // build the header
  $header = array(t('ID'), t('Name'), t('Value handler'), t('Data handler'));
  // render type list as a table
  $rows = array();
  foreach ($types as $type) {
    $rows[] = array('data' => array($type->upt_name, $type->name, $type->value_handler, $type->data_handler));
    $type_options[$type->upt_name] = $type->name;
  }
  // build table as an array
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'caption' => t('Defined types'),
  );
  // output the table
  $form['table'] = array(
    '#markup' => theme('table', $table),
  );
  // get a listing of all items in the registry and render them
  $result = db_query("SELECT * FROM {user_progress_registry}");
  $header = array(t('ID'), t('Title'), t('Type'), t('Group'));
  $rows = array();
  // loop through them all
  foreach ($result as $val) {
    if (empty($val->nid)) {
      $gname = '';
    }
    else {
      $group = node_load($val->nid);
      $gname = l($group->title, 'node/' . $group->nid);
    }
    $rows[] = array('data' => array($val->upregid, $val->title, $val->upt_name, $gname));
  }
  // build a table
  $table = array(
    'header' => $header,
    'rows' => $rows,
    'caption' => t('Activity registry'),
  );
  // table markup
  $form['table2'] = array(
    '#markup' => theme('table', $table),
  );
  // setup ability to add a new record
  $form['add'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add activity to registry'),
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
  );
  $options[0] = t('none');
  // if og is enabled, populate the list of available groups to this user
  if (module_exists('og')) {
    $result = db_query(db_rewrite_sql("SELECT title, n.nid FROM {node} AS n JOIN {og} AS g ON g.nid=n.nid"));
    foreach ($result as $val) {
      $options[$val->nid] = $val->title;
    }
  }
  // allow for associating to a group
  if (module_exists('og')) {
    $form['add']['nid'] = array(
      '#type' => 'select',
      '#title' => t('Group'),
      '#options' => $options,
      '#description' => t('Group associated to this instance of the UP type'),
    );
  }
  $form['add']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Human readable title of the type instance'),
  );
  $form['add']['upt_name'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $type_options,
    '#required' => TRUE,
    '#description' => t('Select a type for this activity'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add activity'),
  );
  return $form;
}

/**
 * Implements hook_settings_submit().
 */
function _user_progress_settings_submit($form, &$form_state) {
  // Allow for optional association to a node / group
  if (isset($form_state['values']['nid'])) {
    $nid = $form_state['values']['nid'];
  }
  else {
    $nid = 0;
  }
  $title = check_plain($form_state['values']['title']);
  $type = check_plain($form_state['values']['upt_name']);
  // build a record
  $record = array(
    'title' => $title,
    'type' => $type,
    'nid' => $nid,
  );
  $id = user_progress_registry_save($record);
}

/**
 * Helper function to save item to registry.
 */
function user_progress_registry_save($record) {
  return db_insert('user_progress_registry')
  ->fields(array(
    'title' => $record['title'],
    'upt_name' => $record['type'],
    'nid' => $record['nid'],
  ))
  ->execute();
}

/**
 * Implementation of user_progress API to get values from drupal.
 */
function _user_progress_get($action) {
  // see what action has been requested
  $valid = TRUE;
  global $user;
  // verify there is a user logged in
  if ($user->uid != 0) {
    switch ($action) {
      case 'guid':
        // generate the GUID so we can communicate safely
        $output = drupal_get_token();
        break;
      case 'maxvalue':
        // if this is valid, return the high value
        if (_user_progress_verify('guid') && _user_progress_verify('upregid')) {
          $data_point = $_GET['data_point'];
          $upregid = $_GET['upregid'];
          $uid = $user->uid;
          // select the count of records based on the current user and assignment
          $output = _user_progress_get_maxvalue($data_point, $upregid, $uid);
        }
        else {
          $output = 0;
        }
        break;
      case 'numtries':
        // if this is valid, get a count of everything
        if (_user_progress_verify('guid') && _user_progress_verify('upregid')) {
          $upregid = $_GET['upregid'];
          $uid = $user->uid;
          // select the count of records based on the current user and assignment
          $output = _user_progress_get_numtries($upregid, $uid);
        }
        else {
          $output = 0;
        }
        break;
        case 'data':
        // if this is valid, get a count of everything
        if (_user_progress_verify('guid') && _user_progress_verify('uprid') && _user_progress_verify('data_point')) {
          $uprid = $_GET['uprid'];
          $data_point = $_GET['data_point'];
          $uid = $user->uid;
          // select the unique value pairing to current user for security
          $params = array(':datapt' => 'data' . $data_point, ':uprid' => $uprid, ':uid' => $uid);
          $val = db_query("SELECT :datapt, upregid FROM {user_progress_records} WHERE uprid = :uprid AND uid = :uid", $params)->fetchObject();
          _user_progress_convert_value($val->{'data' . $data_point}, $val->upregid, 'data' . $data_point . '_handler', TRUE);
          $output = $val->{'data' . $data_point};
        }
        else {
          $output = 0;
        }
        break;
    }
  }
  else {
    $output = 0;
  }
  print $output;
  exit;
}

/**
 * Implementation of user_progress API to set values in drupal.
 */
function _user_progress_set($action) {
  $valid = TRUE;
  global $user;
  // verify user is logged in
  if ($user->uid != 0) {
    // see what action is incoming
    switch ($action) {
      case 'value':
        // if we passed validation, set the values in the database
      // requirement is that 1 data point was passed to us
      if (_user_progress_verify('guid') && _user_progress_verify('upregid') && _user_progress_verify('data1')) {
        // activity id
        $upregid = $_GET['upregid'];
        // user id
        $uid = $user->uid;
        // see if there's any nid set, otherwise null
        if (_user_progress_verify('nid', $_GET['nid'], FALSE)) {
          $nid = $_GET['nid'];
        }
        else {
          $nid = NULL;
        }
        // verify each potential data point, only 1 is required above
        for ($i=1; $i<USER_PROGRESS_MAX_DATA_POINTS+1; $i++) {
          if (isset($_GET['data' . $i])) {
            $data['data' . $i] = $_GET['data' . $i];
            // look up how to handle data storage
            _user_progress_convert_value($data, $upregid, 'data' . $i . '_handler');
          }
        }
        // create the record
        $output = _user_progress_set_record($upregid, $uid, $nid, $data);
      }
      else {
        $output = 0;
      }
    break;
    default:
      // invalid request, return 0
      $output = 0;
    break;
    }
  }
  else {
    $output = 0;
  }
  print $output;
  exit;
}

/**
 * Helper function to utilize type defined data handler
 */
function _user_progress_convert_value(&$data, $upregid, $field = 'default_handler', $reverse = FALSE) {
  // need to invoke as more data is here then we store in the database cache
  $type_data = module_invoke_all('user_progress_define_types');
  drupal_alter('user_progress_define_types', $type_data);
  $upt_name = db_query("SELECT upt_name FROM {user_progress_registry} WHERE upregid = :upregid", array(':upregid' => $upregid))->fetchField();
  switch ($type_data[$upt_name][$field]) {
    case 'int':
    case 'string':
      // don't do anything for ints and strings
      $data = $data;
      break;
    case 'blob':
      // serialize so we can store in the database
      if ($reverse) {
        $data = unserialize($data);
      }
      else {
        $data = serialize($data);
      }
      break;
    case 'time':
      // make sure its in timestamp format and convert if not
      if (!is_numeric($data)) {
        $data = strtotime($data);
      }
      break;
  }
}

/**
 * Helper function for verifying values are valid
 */
function _user_progress_verify($type, $val = NULL, $report = TRUE) {
  $valid = TRUE;
  // if we weren't passed a val use GET
  if (empty($val)) {
    // verify value is set
    if (!isset($_GET[$type])) {
      $valid = FALSE;
    }
    else {
      $val = $_GET[$type];
    }
  }
  // validate the type
  if ($type == 'guid') {
    // verify the token
    if (!drupal_valid_token($val)) {
      $valid = FALSE;
    }
  }
  elseif ($type == 'data') {
    // ignore data, we don't validate beyond set
  }
  elseif ($type == 'upregid') {
    // make sure this is numeric and they have permission to act
    if (!is_numeric($val) || !user_access('set ' . _user_progress_get_registry_upt_name($val) . ' progress record')) {
      $valid = FALSE;
    }
  }
  else {
    // make sure this is a number
    if (!is_numeric($val)) {
      $valid = FALSE;
    }
  }
  // if it wasn't valid, record it
  if (!$valid && $report) {
    watchdog('up_debug', '@value not valid', array('@value' => $type));
  }
  return $valid;
}

/**
 * Helper function to insert into records
 */
function _user_progress_set_record($upregid, $uid, $nid, $data) {
  $field_names = array_keys($data);
  $field_names = array_merge(array('upregid', 'uid', 'nid', 'created'), $field_names);
  $values = array_merge(array($upregid, $uid, $nid, time()), $data);
  // align these arrays
  foreach ($field_names as $key => $name) {
    $fields[$name] = $values[$key];
  }
  // insert the record
  $uprid = db_insert('user_progress_records')->fields($fields)->execute();
  return $uprid;
}

/**
 * Helper function to get max value for an activity of a user
 */
function _user_progress_get_maxvalue($upregid, $uid) {
  return db_query("SELECT MAX(value) FROM {user_progress_records} WHERE upregid = :upregid AND uid = :uid", array(':upregid' => $upregid, ':uid' => $uid))->fetchField();
}

/**
 * Helper function to get a value for an activity of a user
 */
function _user_progress_get_value($uprid, $uid) {
  return db_query("SELECT value FROM {user_progress_records} WHERE uprid = :uprid AND uid = :uid", array(':uprid' => $uprid, ':uid' => $uid))->fetchField();
}

/**
 * Helper function to get the number of attempts on an action
 */
function _user_progress_get_numtries($upregid, $uid) {
  $val = db_query("SELECT COUNT(value) as valcount FROM {user_progress_records} WHERE upregid = :upregid AND uid = :uid", array(':upregid' => $upregid, ':uid' => $uid))->fetchField();
  return $val['valcount'];
}

/**
 * Helper function to get a list of available activities from the registry
 */
function _user_progress_get_registry_ids($upt_name, $nid = NULL) {
  // test for nid being null as the query changes
  if (is_null($nid)) {
    $result = db_query("SELECT upregid, title FROM {user_progress_registry} WHERE upt_name = :upt_name", array(':upt_name' => $upt_name));
  }
  else {
    $result = db_query("SELECT upregid, title FROM {user_progress_registry} WHERE upt_name = :upt_name AND nid = :nid", array(':upt_name' => $upt_name, ':nid' => $nid));
  }
  // loop through and return an array of possible values
  // most time user will only request 1 value but don't want to assume that
  foreach ($result as $val) {
    $ary[] = array(
      'upregid' => $val->upregid,
      'title' => $val->title,
    );
  }
  if (isset($ary)) {
    return $ary;
  }
}

/**
 * Helper function to get a upt_name based on upregid.
 */
function _user_progress_get_registry_upt_name($upregid) {
  return db_query("SELECT upt_name FROM {user_progress_registry} WHERE upregid = :upregid", array(':upregid' => $upregid))->fetchField();
}

/**
 * Helper function to populate the user_progress_types table.
 */
function _user_progress_rebuild_types() {
  // this is more efficient then invoking with every call
  $types = module_invoke_all('user_progress_define_types');
  drupal_alter('user_progress_define_types', $types);
  // act on each type record we found
  foreach ($types as $key => $type) {
    $exists = db_query("SELECT COUNT(upt_name) FROM {user_progress_types} WHERE upt_name = :upt_name", array(':upt_name' => $key))->fetchField();
    // does not exist, insert as this is new or first install
    if ($exists == 0) {
      $id = db_insert('user_progress_types')
      ->fields(array(
        'upt_name' => $key,
        'name' => $type['name'],
      ))
      ->execute();
    }
    else {
      // update existing records just to make sure db mirrors code
      db_update('user_progress_types')
      ->fields(array(
        'name' => $type['name'],
      ))
      ->condition('upt_name', $key)
      ->execute();
    }
  }
  return $types;
}

/**
 * Implements hook_views_api().
 */
function user_progress_views_api() {
  return array(
    'api' => '2',
  );
}

/**
 * Implements hook_user_progress_define_types().
 */
function user_progress_user_progress_define_types() {
  return array();
}


/**
 *  User Progress database load function.
 */
function user_progress_registry_load($upregid) {
  $result = db_query("SELECT * FROM {user_progress_registry} WHERE upregid = :upregid", array(':upregid' => $upregid));
  $record = $results->fetchObject();
  $row = NULL;
  if ($record != NULL) {
    $row = array(
      'upregid' => $upregid,
      'title' => $record->title,
      'upt_name' => $record->upt_name,
      'nid' => $record->nid,
    );
  }
  return $row;
}

/**
 * Load all registry records.
 */
function user_progress_registry_load_all() {
  $result = db_query("SELECT * FROM {user_progress_registry}");
  $record = array();
  foreach ($result as $record) {
    if ($record != NULL) {
      $rows[] = array(
        'upregid' => $upregid,
        'title' => $record->title,
        'upt_name' => $record->upt_name,
        'nid' => $record->nid,
      );
    }
  }
  return $rows;
}
